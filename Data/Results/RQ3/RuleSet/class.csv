"classes().that().arePublic().should().onlyBeExtendedByClassesThat().resideInAPackage(""packageIdentifier"")","""Public classes should be extended by classes in package 'packageIdentifier'."""
"classes().that().haveModifier(JavaModifier.STATIC).should().accessClassesThat().resideInAPackage(""packageIdentifier"")","""Static classes should access classes in package 'packageIdentifier'."""
"classes().that().arePublic().and().areInterfaces().should().dependOnClassesThat().haveNameMatching("".*myclass.*"")","""Public interface classes should implement classes matching 'myclass'."""
"classes().that().arePublic().and().resideInAPackage(""packageIdentifier"").should().dependOnClassesThat().haveNameMatching("".*myclass.*"")","""Public classes in package 'packageIdentifier' should depend on classes matching 'myclass'."""
"classes().that().implement(""packageIdentifier.TypeName"").should().onlyBeExtendedByClassesThat().haveNameMatching("".*myclass.*"")","""classes implementing 'typeName' should be extended by classes matching 'className'."""
"classes().that().implement(""typeName"").should().onlyDependOnClassesThat().haveNameMatching("".*myclass.*"")","""classes implementing 'typeName' should not implement classes matching 'className'."""
Trains Failed,"""Public classes implementing 'typeName' should not access classes annotated with 'annotationTypeName'."""
"classes().that().implement(""typeName"").should().accessClassesThat().resideInAPackage(""packageIdentifier1"")","""classes implementing 'typeName' should access classes in package 'packageIdentifier1'."""
"classes().that().areInnerClasses().and().resideInAPackage(""packageIdentifier"").should().notImplementClassesThat().haveNameMatching("".*myclass.*"")","""Inner classes in package 'packageIdentifier' should not implement classes matching 'className'."""
"classes().that().arePublic().should().dependOnClassesThat().resideInAPackage(""packageIdentifier"")","""Public classes should depend on classes in package 'packageIdentifier'."""
classes().that().arePublic().should().notBeExtendedByClassesThat().arePrivate(),"""Public classes should not be extended by private classes."""
classes().that().arePublic().should().notBeAccesseClassesThat().arePrivate(),"""Public classes should not access private classes."""
classes().that().haveModifier(JavaModifier.FINAL).should().notImplementClassesThat().areFinal(),"""Final classes should not implement final classes."""
noClasses().that().areLocalClasses().should().dependOnClassesThat().areLocalClasses(),"""Local classes should not depend on local classes."""
classes().that().areInterfaces().should().notImplementClassesThat().areStatic(),"""Interface classes should not implement static classes."""
classes().that().areTopLevelClasses().should().notImplementClassesThat().arePrivate(),"""Top-level classes should not implement private classes."""
"classes().that().areProtected().should().ImplementClassesThat().arePrivate().andShould().ImplementClassesThat().resideInAPackage(""packageIdentifier1"")","""Protected classes should implement private classes in package 'packageIdentifier1'."""
"classes().that().arePublic().should().accessClassesThat().areStatic().andShould().accessClassesThat().haveNameMatching("".*myclass.*"")","""Public classes should be accessed by static classes matching 'className'."""
classes().that().areProtected().should().notImplementClassesThat().arePrivate(),"""Protected classes should not implement private classes."""
classes().that().arePackagePrivate().should().notBeAccesseMethodsThat().arePrivate(),"""Package-private classes should not access private methods."""
"classes().that().arePublic().should().haveNameMatching("".*myclass.*"")","""Public classes should have names matching 'classname'."""
"classes().that().arePublic().should().notBeAssignableTo(""typeName"")","""Public classes should not be assignable to 'typeName'."""
"classes().that().arePublic().should().no such no operator(""typeName"")","""Public classes should not have parameter types of 'typeName'."""
"classes().that().arePublic().should().haveFullNameNotMatching(""regex"")","""Public classes should not have full names matching the regex."""
"classes().that().arePublic().should().haveRawReturnType(""typeName"")","""Public classes should have a return type of 'typeName'."""
"classes().that().arePublic().should().haveNameContaining(""regex"")","""Public classes should have names containing the regex."""
"classes().that().arePublic().should().haveNameNotEndingWith(""regex"")","""Public classes should not have names ending with the regex."""
"classes().that().arePrivate().should().haveNameStartingWith(""regex"")","""Private classes should have names starting with the regex."""
"classes().that().areProtected().should().declareThrowableOfType(""typeName"")","""Protected classes should declare throwable types of 'typeName'."""
"classes().that().arePackagePrivate().should().notBeAnnotatedWith(""annotationTypeName"")","""Package-private classes should not be annotated with 'annotationTypeName'."""
classes().that().haveModifier(JavaModifier.STATIC).should().bePublic(),"""Static classes should be public."""
classes().that().areAnonymousClasses().should().bePublic(),"""Anonymous classes should be public."""
classes().that().arePublic().should().beProtected(),"""Public classes should be protected."""
classes().that().arePublic().should().beAbstract(),"""Public classes should be abstract."""
classes().that().areAnonymousClasses().should().beEnums(),"""Anonymous classes should be enums."""
