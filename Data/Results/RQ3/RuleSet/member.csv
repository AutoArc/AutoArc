"members().that().arePublic().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Public members should be declared in classes in package 'packageIdentifier'."""
"members().that().arePrivate().should().beDeclaredInClassesThat().areDeclaredInClassesThat().implement(""typeName"")","""Private members should be declared in classes implementing 'typeName'."""
"members().that().areProtected().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Protected members should be declared in classes in package 'packageIdentifier'."""
"members().that().arePrivate().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private members should be declared in classes in package 'packageIdentifier'."""
"members().that().arePackagePrivate().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Package-private members should be declared in classes in package 'packageIdentifier'."""
"members().that().arePublic().and().haveNameMatching(""get"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Public members with names matching with 'get' should be declared in classes in package 'packageIdentifier'."""
"members().that().arePrivate().should().notBeDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private members should not be declared in classes in package 'packageIdentifier'."""
"members().that().arePublic().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier1"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier2"")","""Public members in package 'packageIdentifier1' should be declared in classes in package 'packageIdentifier2'."""
"members().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().implement(""typeName"")","""Members with names matching with 'regex' should be declared in classes implementing 'typeName'."""
"members().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier1"")","""Members with names matching with 'regex' should be declared in classes in package 'packageIdentifier1'."""
members().that().arePublic().should().beDeclaredInClassesThat().arePublic(),"""Public members should be declared in public classes."""
members().that().arePrivate().should().beDeclaredInClassesThat().areStatic(),"""Private members should be declared in static classes."""
members().that().areProtected().should().beDeclaredInClassesThat().areProtected(),"""Protected members should be declared in protected classes."""
members().that().arePrivate().should().notBeDeclaredInClassesThat().arePackagePrivate(),"""Private members should not be declared in package-private classes."""
members().that().arePackagePrivate().should().beDeclaredInClassesThat().areFinal(),"""Package-private members should be declared in final classes."""
"members().that().arePublic().and().haveNameMatching(""get"").should().beDeclaredInClassesThat().arePrivate()","""Public members with names matching with 'get' should be declared in private classes."""
"members().that().arePrivate().should().notBeDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private members should not be declared in classes in package 'packageIdentifier'."""
"members().that().arePublic().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier1"").should().beDeclaredInClassesThat().arePublic().andShould().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier2"")","""Public members in package 'packageIdentifier1' should be declared in public classes in package 'packageIdentifier2'."""
"members().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().arePublic().andShould().beDeclaredInClassesThat().areDeclaredInClassesThat().implement(""typeName"")","""Members with names matching with 'regex' should be declared in public classes implementing 'typeName'."""
"members().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().areStatic().andShould().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Members with names matching with 'regex' should be declared in static classes in package 'packageIdentifier'."""
"members().that().arePrivate().should().beAnnotatedWith(""annotatedTypeName"")","""Private members should be annotated with 'annotatedTypeName'."""
"members().that().areProtected().should().haveFullNameMatching(""regex"")","""Protected members should have full names matching the regex."""
Trains Failed,"""Private members should have the modifier 'JavaModifier'."""
"members().that().arePackagePrivate().should().haveNameMatching(""regex"")","""Package-private members should have names matching the regex."""
"members().that().arePublic().should().haveNameEndingWith(""regex"")","""Public members should have names ending with the regex."""
"members().that().arePrivate().should().notBeDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private members should not be declared in classes in package 'packageIdentifier'."""
"members().that().arePublic().should().haveNameStartingWith(""regex"")","""Public members should have names starting with the regex."""
"members().that().arePrivate().should().haveNameStartingWith(""regex"")","""Private members should have names starting with the regex."""
"members().that().arePublic().should().haveNameStartingWith(""regex"")","""Public members should have names starting with the regex."""
"members().that().arePrivate().should().declareThrowableOfType(""typeName"")","""Private members should declare throwable types of 'typeName'."""
"members().that().haveModifier(JavaModifier.STATIC).and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().bePublic()","""Static members in package 'packageIdentifier' should be public."""
"members().that().haveModifier(JavaModifier.FINAL).and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().bePrivate()","""Final members in package 'packageIdentifier' should be private."""
"members().that().arePrivate().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().beProtected()","""Private members in package 'packageIdentifier' should be protected."""
"members().that().arePublic().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().bePackagePrivate()","""Public members in package 'packageIdentifier' should be package-private."""
"members().that().haveNameMatching(""regex"").should().bePublic()","""Members matching the regex should be public."""
