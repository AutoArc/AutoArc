"constructors().that().arePublic().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Public constructors should be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePrivate().should().beDeclaredInClassesThat().areDeclaredInClassesThat().implement(""typeName"")","""Private constructors should be declared in classes implementing 'typeName'."""
"constructors().that().areProtected().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Protected constructors should be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePrivate().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private constructors should be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePackagePrivate().should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Package-private constructors should be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePublic().and().haveNameMatching(""get"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Public constructors with names matching with 'get' should be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePrivate().should().notBeDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private constructors should not be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePublic().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier1"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier2"")","""Public constructors in package 'packageIdentifier1' should be declared in classes in package 'packageIdentifier2'."""
"constructors().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().implement(""typeName"")","""Constructors with names matching with 'regex' should be declared in classes implementing 'typeName'."""
"constructors().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier1"")","""Constructors with names matching with 'regex' should be declared in classes in package 'packageIdentifier1'."""
constructors().that().arePublic().should().beDeclaredInClassesThat().arePublic(),"""Public constructors should be declared in public classes."""
constructors().that().arePrivate().should().beDeclaredInClassesThat().areStatic(),"""Private constructors should be declared in static classes."""
constructors().that().areProtected().should().beDeclaredInClassesThat().areProtected(),"""Protected constructors should be declared in protected classes."""
constructors().that().arePrivate().should().notBeDeclaredInClassesThat().arePackagePrivate(),"""Private constructors should not be declared in package-private classes."""
constructors().that().arePackagePrivate().should().beDeclaredInClassesThat().areFinal(),"""Package-private constructors should be declared in final classes."""
"constructors().that().arePublic().and().haveNameMatching(""get"").should().beDeclaredInClassesThat().arePrivate()","""Public constructors with names matching with 'get' should be declared in private classes."""
"constructors().that().arePrivate().should().notBeDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private constructors should not be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePublic().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier1"").should().beDeclaredInClassesThat().arePublic().andShould().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier2"")","""Public constructors in package 'packageIdentifier1' should be declared in public classes in package 'packageIdentifier2'."""
"constructors().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().arePublic().andShould().beDeclaredInClassesThat().areDeclaredInClassesThat().implement(""typeName"")","""Constructors with names matching with 'regex' should be declared in public classes implementing 'typeName'."""
"constructors().that().haveNameMatching(""regex"").should().beDeclaredInClassesThat().areStatic().andShould().beDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Constructors with names matching with 'regex' should be declared in static classes in package 'packageIdentifier'."""
"constructors().that().arePrivate().should().beAnnotatedWith(""annotatedTypeName"")","""Private constructors should be annotated with 'annotatedTypeName'."""
"constructors().that().areProtected().should().haveFullNameMatching(""regex"")","""Protected constructors should have full names matching the regex."""
Trains Failed,"""Private constructors should have the modifier 'JavaModifier'."""
"constructors().that().arePackagePrivate().should().haveNameMatching(""regex"")","""Package-private constructors should have names matching the regex."""
"constructors().that().arePublic().should().haveNameEndingWith(""regex"")","""Public constructors should have names ending with the regex."""
"constructors().that().arePrivate().should().notBeDeclaredInClassesThat().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"")","""Private constructors should not be declared in classes in package 'packageIdentifier'."""
"constructors().that().arePublic().should().haveNameStartingWith(""regex"")","""Public constructors should have names starting with the regex."""
"constructors().that().arePrivate().should().haveNameStartingWith(""regex"")","""Private constructors should have names starting with the regex."""
"constructors().that().arePublic().should().haveNameStartingWith(""regex"")","""Public constructors should have names starting with the regex."""
"constructors().that().arePrivate().should().declareThrowableOfType(""typeName"")","""Private constructors should declare throwable types of 'typeName'."""
"constructors().that().haveModifier(JavaModifier.STATIC).and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().bePublic()","""Static constructors in package 'packageIdentifier' should be public."""
"constructors().that().haveModifier(JavaModifier.FINAL).and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().bePrivate()","""Final constructors in package 'packageIdentifier' should be private."""
"constructors().that().arePrivate().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().beProtected()","""Private constructors in package 'packageIdentifier' should be protected."""
"constructors().that().arePublic().and().areDeclaredInClassesThat().resideInAPackage(""packageIdentifier"").should().bePackagePrivate()","""Public constructors in package 'packageIdentifier' should be package-private."""
"constructors().that().haveNameMatching(""regex"").should().bePublic()","""Constructors matching the regex should be public."""
